name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      quick_integration:
        description: "Run integration-only tests (payments integration)"
        required: false
        default: false
        type: boolean
      run_lint:
        description: "Run lint/format checks (ruff/black)"
        required: false
        default: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.discover.outputs.apps }}
      int_apps: ${{ steps.discover.outputs.int_apps }}
    steps:
      - uses: actions/checkout@v4
      - id: discover
        run: |
          set -e
          ROOT="apps"
          # All apps with requirements.txt
          APPS=$(ls -1 "$ROOT" | while read a; do if [ -f "$ROOT/$a/requirements.txt" ]; then echo "$a"; fi; done | jq -R . | jq -cs .)
          echo "apps=$APPS" >> $GITHUB_OUTPUT
          # Apps with integration test file present
          INT=$(ls -1 "$ROOT" | while read a; do if [ -f "$ROOT/$a/tests/test_payments_integration.py" ]; then echo "$a"; fi; done | jq -R . | jq -cs .)
          echo "int_apps=$INT" >> $GITHUB_OUTPUT

  backend-matrix:
    name: Backend (${{ matrix.app }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.apps) }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.app }}-${{ hashFiles('apps/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.app }}-
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/${{ matrix.app }}/requirements.txt
      - name: Run tests (${{ matrix.app }})
        env:
          DB_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
        run: |
          cd apps/${{ matrix.app }}
          export PYTHONPATH="$GITHUB_WORKSPACE/libs/superapp_shared:$PYTHONPATH"
          pytest -q

  backend-integration:
    name: Integration (${{ matrix.app }})
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.quick_integration && needs.prepare.outputs.int_apps != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.int_apps) }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-int-${{ matrix.app }}-${{ hashFiles('apps/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-int-${{ matrix.app }}-
            ${{ runner.os }}-pip-int-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/${{ matrix.app }}/requirements.txt
      - name: Run integration tests only
        env:
          DB_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/postgres
        run: |
          cd apps/${{ matrix.app }}
          export PYTHONPATH="$GITHUB_WORKSPACE/libs/superapp_shared:$PYTHONPATH"
          if [ -f tests/test_payments_integration.py ]; then pytest -q tests/test_payments_integration.py; else echo "No integration test file"; fi

  flutter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Flutter tests (all clients)
        run: |
          cd $GITHUB_WORKSPACE
          bash tools/run_flutter_tests.sh --continue

  lint:
    name: Lint/Format
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_lint }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
      - name: Ruff (lint)
        run: |
          ruff version
          ruff check .
      - name: Black (format check)
        run: |
          black --version
          black --check .
